'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var fs = require('fs');

var GenerateAssetWebpackPlugin = (function () {
    function GenerateAssetWebpackPlugin(options) {
        _classCallCheck(this, GenerateAssetWebpackPlugin);

        this.filename = options.filename;
        this.fn = options.fn;
        this.files = options.extraFiles || [];
    }

    _createClass(GenerateAssetWebpackPlugin, [{
        key: 'apply',
        value: function apply(compiler) {
            var _this = this;

            compiler.plugin('emit', function (compilation, cb) {
                _this.fn(compilation, function (err, body) {
                    if (err) {
                        return cb(err);
                    }

                    compilation.assets[_this.filename] = {
                        source: function source() {
                            return body;
                        },
                        size: function size() {
                            return body.length;
                        }
                    };

                    _this.files.forEach(function (file) {
                        compilation.assets[file] = {
                            source: function source() {
                                return fs.readFileSync(file);
                            },
                            size: function size() {
                                return fs.statSync(file).size;
                            }
                        };
                    });

                    cb();
                });
            });
        }
    }]);

    return GenerateAssetWebpackPlugin;
})();

module.exports = GenerateAssetWebpackPlugin;

